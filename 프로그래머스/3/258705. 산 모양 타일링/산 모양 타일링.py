def solution(n, tops):
    # 각 도형을 사용하여 삼각형을 채운 모양을 아래와 같이 지칭
    # 1(삼각형), 2(오른쪽 위로 표족한 평행사변형)
    # 3(왼쪽 위로 표족한 평행사변형), 4(마름모)
    
    # 사다리꼴을 채우는 경우 -> 아래 방향의 중간 정삼각형을 채우는 경우의 수와 같음
    # 사다리꼴을 3번으로 채운 경우 -> 다음 사다리꼴 2번 사용 불가능
    add_3 = [0] * (n+1)
    # 사다리꼴을 1, 2, 4번 방법으로 채운 경우 -> 영향을 받지않음
    except_3 = [0] * (n+1)
    except_3[0] = 1
    
    for i in range(1, n+1):
        if tops[i-1]:
            # 이전 방법에 대해 모두 3 적용 가능
            add_3[i] = add_3[i-1] + except_3[i-1]
            # 이전 방법이 3 포함인 경우 -> 1, 4 적용 가능(2개)
            # 이전 방법이 3 제외인 경우 -> 1, 2, 4 적용 가능(3개)
            except_3[i] = add_3[i-1] * 2 + except_3[i-1] * 3  
        else:
            # 이전 방법에 대해 모두 3 적용 가능
            add_3[i] = add_3[i-1] + except_3[i-1]
            # 이전 방법이 3 포함인 경우 -> 1 적용 가능(1개)
            # 이전 방법이 3 제외인 경우 -> 1, 2 적용 가능(2개)
            except_3[i] = add_3[i-1] + except_3[i-1] * 2

        add_3[i] %= 10007
        except_3[i] %= 10007
            
    return (add_3[n]+except_3[n]) % 10007